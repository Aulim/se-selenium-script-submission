# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestscriptivanderhanson():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testscriptivanderhanson(self):
    # Test name: test-script-ivander-hanson
    # Step # | name | target | value
    # 1 | open | https://seleniumbase.io/demo_page | 
    self.driver.get("https://seleniumbase.io/demo_page")
    # 2 | setWindowSize | 1059x816 | 
    self.driver.set_window_size(1059, 816)
    # 3 | mouseDownAt | id=mySlider | 167.1999969482422,11.79998779296875
    element = self.driver.find_element(By.ID, "mySlider")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 4 | mouseMoveAt | id=mySlider | 167.1999969482422,11.79998779296875
    element = self.driver.find_element(By.ID, "mySlider")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 5 | mouseUpAt | id=mySlider | 167.1999969482422,11.79998779296875
    element = self.driver.find_element(By.ID, "mySlider")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 6 | type | id=mySlider | 100
    self.driver.find_element(By.ID, "mySlider").send_keys("100")
    # 7 | click | id=mySlider | 
    self.driver.find_element(By.ID, "mySlider").click()
    # 8 | click | id=mySelect | 
    self.driver.find_element(By.ID, "mySelect").click()
    # 9 | select | id=mySelect | label=Set to 100%
    dropdown = self.driver.find_element(By.ID, "mySelect")
    dropdown.find_element(By.XPATH, "//option[. = 'Set to 100%']").click()
    # 10 | mouseDownAt | id=svgRect | 115.19999694824219,9
    element = self.driver.find_element(By.ID, "svgRect")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 11 | mouseMoveAt | id=svgRect | 115.19999694824219,9
    element = self.driver.find_element(By.ID, "svgRect")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 12 | mouseUpAt | id=svgRect | 115.19999694824219,9
    element = self.driver.find_element(By.ID, "svgRect")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 13 | click | id=svgRect | 
    self.driver.find_element(By.ID, "svgRect").click()
    # 14 | click | id=checkBox4 | 
    self.driver.find_element(By.ID, "checkBox4").click()
    # 15 | click | id=checkBox3 | 
    self.driver.find_element(By.ID, "checkBox3").click()
    # 16 | click | id=checkBox2 | 
    self.driver.find_element(By.ID, "checkBox2").click()
    # 17 | click | css=tr:nth-child(9) > td:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(9) > td:nth-child(1)").click()
    # 18 | click | id=checkBox1 | 
    self.driver.find_element(By.ID, "checkBox1").click()
    # 19 | click | id=drop2 | 
    self.driver.find_element(By.ID, "drop2").click()
    # 20 | click | id=radioButton2 | 
    self.driver.find_element(By.ID, "radioButton2").click()
    # 21 | click | id=myLink1 | 
    self.driver.find_element(By.ID, "myLink1").click()
  
