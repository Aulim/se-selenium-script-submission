# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestSeseleniumjurian2602206972():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_seseleniumjurian2602206972(self):
    # Test name: se-selenium-jurian-2602206972
    # Step # | name | target | value
    # 1 | open | /demo_page | 
    self.driver.get("https://seleniumbase.io/demo_page")
    # 2 | setWindowSize | 974x1032 | 
    self.driver.set_window_size(974, 1032)
    # 3 | type | id=mySlider | 100
    self.driver.find_element(By.ID, "mySlider").send_keys("100")
    # 4 | click | id=mySlider | 
    self.driver.find_element(By.ID, "mySlider").click()
    # 5 | click | id=mySelect | 
    self.driver.find_element(By.ID, "mySelect").click()
    # 6 | select | id=mySelect | label=Set to 75%
    dropdown = self.driver.find_element(By.ID, "mySelect")
    dropdown.find_element(By.XPATH, "//option[. = 'Set to 75%']").click()
    # 7 | click | id=checkBox2 | 
    self.driver.find_element(By.ID, "checkBox2").click()
    # 8 | click | id=checkBox3 | 
    self.driver.find_element(By.ID, "checkBox3").click()
    # 9 | click | id=checkBox4 | 
    self.driver.find_element(By.ID, "checkBox4").click()
    # 10 | click | id=radioButton2 | 
    self.driver.find_element(By.ID, "radioButton2").click()
    # 11 | mouseOver | id=radioButton2 | 
    element = self.driver.find_element(By.ID, "radioButton2")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 12 | mouseOut | id=radioButton2 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 13 | click | id=checkBox5 | 
    self.driver.find_element(By.ID, "checkBox5").click()
  
